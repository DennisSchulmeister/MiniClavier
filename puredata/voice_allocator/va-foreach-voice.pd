#N canvas 0 49 1920 1009 12;
#X obj -30 -30 preset_hub k12 1 %hidden%;
#X obj 100 400 pointer;
#X text 110 510 ---- Loop over all voices ---;
#X obj 100 590 - 1;
#X obj 100 620 until;
#X obj 100 660 f;
#X obj 140 660 + 1;
#X obj 100 300 inlet;
#X obj 100 430 trigger p p;
#X obj 100 760 outlet;
#X obj 400 540 inlet;
#X obj 100 560 trigger f b;
#X msg 160 620 0;
#X obj 400 570 bang;
#X text 10 140 Send a bang to the second inlet to end the iteration
early.;
#X text 10 170 \$1 must be \$0 of the voice allocator.;
#X obj 200 460 s \$0-main-pointer;
#X obj 280 660 r \$0-main-pointer;
#X obj 100 530 get \$1_main polyphony;
#X obj 100 690 element \$1_main voices;
#X text 110 350 ---- Get \$1_main instance ----;
#X text 270 690 Output: voice pointer;
#X text 160 400 Output: main pointer;
#X text 110 740 ---- Output voice pointer ----;
#X text 10 10 Another small abstraction to simplify the implementation
of the voice allocator. This time iterating over all voice instances
\, which is needed whenever the voice allocator receives an event that
it must handle., f 61;
#X text 10 90 Send a bang to the first inlet to start the iteration.
The outlet will output the voice pointers one after another.;
#X msg 100 370 traverse pd-vac__data \, next;
#X text 400 370 This gets the \$1_main instance \, because it is the
only scalar in the vac__data canvas., f 33;
#X connect 1 0 8 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 5 0 19 0;
#X connect 6 0 5 1;
#X connect 7 0 26 0;
#X connect 8 0 18 0;
#X connect 8 1 16 0;
#X connect 10 0 13 0;
#X connect 11 0 3 0;
#X connect 11 1 12 0;
#X connect 12 0 5 0;
#X connect 13 0 4 1;
#X connect 17 0 19 1;
#X connect 18 0 11 0;
#X connect 19 0 9 0;
#X connect 26 0 1 0;
