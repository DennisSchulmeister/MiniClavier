#N canvas 0 49 1920 1009 12;
#X obj -30 -30 preset_hub k12 1 %hidden%;
#X obj 100 300 pointer;
#X text 110 410 ---- Loop over all voices ---;
#X obj 100 490 - 1;
#X obj 100 520 until;
#X obj 100 560 f;
#X obj 140 560 + 1;
#X obj 100 200 inlet;
#X obj 100 330 trigger p p;
#X obj 100 660 outlet;
#X obj 400 440 inlet;
#X obj 100 460 trigger f b;
#X msg 160 520 0;
#X obj 400 470 bang;
#X text 10 140 Send a bang to the second inlet to end the iteration
early., f 69;
#X obj 200 360 s \$0-main-pointer;
#X obj 280 560 r \$0-main-pointer;
#X text 280 590 Output: voice pointer;
#X text 160 300 Output: main pointer;
#X text 110 640 ---- Output voice pointer ----;
#X text 10 10 Another small abstraction to simplify the implementation
of the voice allocator. This time iterating over all voice instances
\, which is needed whenever the voice allocator receives an event that
it must handle., f 69;
#X text 10 90 Send a bang to the first inlet to start the iteration.
The outlet will output the voice pointers one after another., f 69
;
#X msg 100 270 traverse pd-vac__data \, next;
#X text 110 250 ---- Get vac__main instance ----;
#X text 400 270 This gets the vac__main instance \, because it is the
only scalar in the vac__data canvas., f 33;
#X obj 100 430 get vac__main polyphony;
#X obj 100 590 element vac__main voices;
#X connect 1 0 8 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 5 0 26 0;
#X connect 6 0 5 1;
#X connect 7 0 22 0;
#X connect 8 0 25 0;
#X connect 8 1 15 0;
#X connect 10 0 13 0;
#X connect 11 0 3 0;
#X connect 11 1 12 0;
#X connect 12 0 5 0;
#X connect 13 0 4 1;
#X connect 16 0 26 1;
#X connect 22 0 1 0;
#X connect 25 0 11 0;
#X connect 26 0 9 0;
