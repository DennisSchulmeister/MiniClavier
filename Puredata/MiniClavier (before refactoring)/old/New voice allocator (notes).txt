Eigener Voice Allocator
=======================

Anforderungen im Vergleich zu PD [poly]
---------------------------------------

 * Retriggering (keine doppelten Noten)
 * Sustain
 * Sustenuto

Sustenuto: Wie Sustain, wirkt sich aber nicht auf neue Noten aus, die nach
dem Drücken des Pedals gespielt werden.


Grundidee
---------

 * Verwaltung einer Liste der aktuell aktiven Noten
 * Zuweisung der ältesten inaktiven Note (damit die Relasezeit zu Ende laufen kann)
 * Retriggering einer Note, die bereits aktiv ist
 * Voice Stealing der leisesten Note, wenn die Polyphony erschöpft ist
 * Mehrere Flags je Note: Sounding, Sustain, Sustenuto
 * Die Flags steuern, welche Events (Note On, Note Off) weitergegeben werden


Datenstruktur
-------------

typedef struct voice {
    uint8 number;
    uint8 velocity;
    
    // Anmerkung: In C könnte diese ein Feld mit Bit-Flags sein
    bool active;
    bool sustain;
    bool sustenuto;
    
    // Zeit der letzten Änderung des Aktivflags, PD [timer]
    int time;
} t_voice;

t_voice[xxx] voices;


Psuedocode
==========


Ereignis: Note On
-----------------

t_note* allocated_voice = voices[0];

for (voice in voices) {
    if (voice.note == event.note) {
        // Retrigger
        allocated_voice = &voice;
        break;
    } else if (!voice.active && voice.time < allocated_voice.time) {
        allocated_voice = &voice;
    }
}

if (allocated_voice.active) {
    play_note_off(allocated_voice);
}

allocated_voice.note      = event.note;
allocated_voice.velocity  = event.velocity;
allocated_voice.active    = true;
allocated_voice.sustain   = CURRENT_SUSTAIN;
allocated_voice.sustenuto = false;

play_note_on(allocated_voice);





t_note* allocated_voice = null;
t_note* steal_voice = voices[0];

for (voice in voices) {
    if (!voice.active) {
        if ((allocated_voice == null) || (voice.time < allocated_voice.time)) {
            allocated_voice = &voice;
        }
    } else {
        if (voice.note == event.note) {
            // Retrigger note
            allocated_voice = &voice;
        } else if ((steal_voice == null) || (voice.velocity < steal_voice.velocity)) {
            steal_voice = &voice;
        }
    }
}

if (allocated_voice == null) {
    play_note_off(steal_voice);
    allocated_voice = steal_voice;
}

allocated_voice.note      = event.note;
allocated_voice.velocity  = event.velocity;
allocated_voice.active    = true;
allocated_voice.sustain   = CURRENT_SUSTAIN;
allocated_voice.sustenuto = false;

play_note_on(allocated_voice);


Ereignis: Note Off
------------------

for (voice in voices) {
    if (voice.note === event.note) {
        voice.active = false;
        
        if (!voice.sustain && !voice.sustenuto) {
            play_note_off(voice);
        }
    }
}


Ereignis: Sustain On
--------------------

CURRENT_SUSTAIN = 1;
for (voice in voices) if (voice.active) voice.sustain = true;


Ereignis: Sustain Off
---------------------

CURRENT_SUSTAIN = 0;

for (voice in voices) {
    if (voice.sustain) {
        voice.sustain = false;
        if (!voice.active) play_note_off(voice);
    }
}


Ereignis: Sustenuto On
----------------------

for (voice in voices) if (voice.active) voice.sustenuto = true;


Ereignis: Sustenuto Off
-----------------------

for (voice in voices) {
    if (voice.sustenuto) {
        voice.sustenuto = false;
        if (!voice.active) play_note_off(voice);
    }
}
